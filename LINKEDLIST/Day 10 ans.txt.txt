1. Program to save names in a SLL, names in the list must be saved in ascending order based on ASCII value 
struct node 
{ 
	char name[20];
	struct node *link;
}


2. Write separate functions to delete a node from SLL based on i) position ii) based on name use the previously defined structure.
// A complete working C program to delete a node in a linked list at a given position
#include <stdio.h>
#include <stdlib.h>

// A linked list node
struct Node
{
    int data;
    struct Node *next;
};


void push(struct Node** head_ref, int new_data)
{
    struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
    new_node->data  = new_data;
    new_node->next = (*head_ref);
    (*head_ref)    = new_node;
}


void deleteNode(struct Node **head_ref, int position)
{
   
   if (*head_ref == NULL)
      return;

   
   struct Node* temp = *head_ref;

    // If head needs to be removed
    if (position == 0)
    {
        *head_ref = temp->next;   // Change head
        free(temp);               // free old head
        return;
    }

    // Find previous node of the node to be deleted
    for (int i=0; temp!=NULL && i<position-1; i++)
         temp = temp->next;
    
    if (temp == NULL || temp->next == NULL)
         return;

    
    struct Node *next = temp->next->next;

    free(temp->next); 
    temp->next = next;  
}

// This function prints contents of linked list starting from the given node
void printList(struct Node *node)
{
    while (node != NULL)
    {
        printf(" %d ", node->data);
        node = node->next;
    }
}

int main()
{
    /* Start with the empty list */
    struct Node* head = NULL;

    push(&head, 7);
    push(&head, 1);
    push(&head, 3);
    push(&head, 2);
    push(&head, 8);

    puts("Created Linked List: ");
    printList(head);
    deleteNode(&head, 4);
    puts("\nLinked List after Deletion at position 4: ");
    printList(head);
    return 0;
}
3. write a program to merge two SLL and the result must be sorted 
 
struct node 
{ 
	int empid;
	struct node *link; 
}
#include<stdio.h>
#include<stdlib.h>

struct node
{
        int info;
        struct node *link;
};

struct node *create(struct node *start);
struct node *insert_s(struct node *start,int data);
struct node *insert(struct node *start,int data);
void display(struct node *start );
void merge(struct node *p1,struct node *p2);
int main()
{
        struct node *start1=NULL,*start2=NULL;
        start1=create(start1);
        start2=create(start2);

        printf("List1 : ");
        display(start1);
        printf("List2 : ");
        display(start2);
        merge(start1, start2);

        return 0;

}/End of main()/

void merge(struct node *p1,struct node *p2)
{
        struct node *start3;
        start3=NULL;

        while(p1!=NULL && p2!=NULL)
        {
                if(p1->info < p2->info)
                {
                        start3=insert(start3,p1->info);
                        p1=p1->link;
                }
                else if(p2->info < p1->info)
                {
                        start3=insert(start3,p2->info);
                        p2=p2->link;
                }
                else if(p1->info==p2->info)
                {
                        start3=insert(start3,p1->info);
                        p1=p1->link;
                        p2=p2->link;
                }
        }
        /If second list has finished and elements left in first list/
        while(p1!=NULL)
        {
                start3=insert(start3,p1->info);
                p1=p1->link;
        }
        /If first list has finished and elements left in second list/
        while(p2!=NULL)
        {
                start3=insert(start3,p2->info);
                p2=p2->link;
        }
        printf("Merged list is : ");
        display(start3);
}

struct node *create(struct node *start )
{
        int i,n,data;
        printf("Enter the number of nodes : ");
        scanf("%d",&n);
        start=NULL;
        for(i=1;i<=n;i++)
        {
                printf("Enter the element to be inserted : ");
                scanf("%d",&data);
                start=insert_s(start, data);
        }
        return start;
}/End of create_slist()/

struct node *insert_s(struct node *start,int data)
{
        struct node *p,*tmp;
        tmp=(struct node *)malloc(sizeof(struct node));
        tmp->info=data;
        /*list empty or data to be added in beginning */
        if(start==NULL || data<start->info)
        {
                tmp->link=start;
                start=tmp;
                return start;
        }
        else
        {
                p=start;
                while(p->link!=NULL && p->link->info < data)
                        p=p->link;
                tmp->link=p->link;
                p->link=tmp;
        }
        return start;
}/End of insert_s()/

struct node *insert(struct node *start,int data)
{
        struct node *p,*tmp;
        tmp=(struct node *)malloc(sizeof(struct node));
        tmp->info=data;
        /If list is empty/
        if(start==NULL)
        {
                tmp->link=start;
                start=tmp;
                return start;
        }
        else    /Insert at the end of the list/
        {
                p=start;
                while(p->link!=NULL)
                        p=p->link;
                tmp->link=p->link;
                p->link=tmp;
        }
        return start;
}/End of insert()/

void display(struct node *start)
{
        struct node *p;
        if(start==NULL)
        {
                printf("List is empty\n");
                return;
        }
        p=start;
        while(p!=NULL)
        {
                printf("%d ",p->info);
                p=p->link;
        }
        printf("\n");
}/End of display()/

4. write a program in SLL to remove duplicate nodes 
Input: 5, 8 , 7 , 1, 7, 8
Output:
Unique elem in SLL: 5, 8 , 7 , 1
Elem which are repeated in SLL: 8,7 
#include<stdio.h>
#include<stdlib.h>

/* Structure for a node */
struct node
{
int data;
struct node* next;
};

/* Function to insert a node */
void insert_elements(struct node** head, int new_data)
{
struct node* new_node = (struct node*) malloc(sizeof(struct node));
new_node -> data = new_data;
new_node -> next = (*head);
(*head) = new_node;
}


/* Function to print nodes */
void display_list(struct node *node)
{
while (node!=NULL)
{
printf(“%d “, node->data);
node = node -> next;
}
}

/* Function to remove duplicates from a sorted list */
void remove_duplicate_elements(struct node* head)
{
struct node* current = head;

struct node* next_next;

if (current == NULL)
return;

while (current -> next != NULL)
{
/* Compare current node with its next */
if (current -> data == current -> next -> data)
{
next_next = current -> next -> next;
free(current -> next);
current -> next = next_next;
}
else
{
current = current -> next;
}
}
}


int main()
{
struct node* head = NULL;
int n;
printf(“\nEnter the total number of elements : “);
scanf(“%d”, &n);
printf(“\nEnter the sorted linked list : “);
int i;
for(i = 0; i < n; i++)
{
int data;
scanf(“%d”, &data);
insert_elements(&head, data);
}

printf(“\nLinked list before removing duplicates : “);
display_list(head);
printf(“\n”);

remove_duplicate_elements(head);

printf(“\nLinked list after removing duplicates : “);
display_list(head);
printf(“\n”);


return 0;
}

